{
  "address": "0x29381e758DeCdDD4A30a35357f047227861627bc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gasService_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedByGateway",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "commP",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "size",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct OnRampSource.Offer",
          "name": "offer",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        }
      ],
      "name": "DataReady",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "aggregationPayout",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "aggregations",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "commPToAggregateID",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "executeWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasService",
      "outputs": [
        {
          "internalType": "contract IAxelarGasService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "commP",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "size",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "location",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct OnRampSource.Offer",
          "name": "offer",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "destinationAddress",
          "type": "string"
        }
      ],
      "name": "offerData",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "offers",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "commP",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "size",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "provenAggregations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x856bbed0c05cd5391fc555ab74fc63715ef3bbc511cc654cea36e038c2bc72c4",
  "receipt": {
    "to": null,
    "from": "0x42C930A33280a7218bc924732d67dd84D6247Af4",
    "contractAddress": "0x29381e758DeCdDD4A30a35357f047227861627bc",
    "transactionIndex": 0,
    "gasUsed": "1324813",
    "logsBloom": "0x
    "blockHash": "0x89f8cac646c03931a84c232e0d9b023f4a807d3038e2b72a6ce92f7b495a5074",
    "transactionHash": "0x856bbed0c05cd5391fc555ab74fc63715ef3bbc511cc654cea36e038c2bc72c4",
    "logs": [],
    "blockNumber": 6576882,
    "cumulativeGasUsed": "1324813",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199",
    "0x1a920B29eBD437074225cAeE44f78FC700B27a5d"
  ],
  "numDeployments": 1,
  "solcInputHash": "4a6864f662c19b0a1f2826a50783ced4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasService_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"commP\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct OnRampSource.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"DataReady\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"aggregationPayout\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aggregations\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"commPToAggregateID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasService\",\"outputs\":[{\"internalType\":\"contract IAxelarGasService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"commP\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct OnRampSource.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destinationAddress\",\"type\":\"string\"}],\"name\":\"offerData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"commP\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"provenAggregations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnRampSource.sol\":\"OnRampSource\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\\n\\ncontract AxelarExecutable is IAxelarExecutable {\\n    IAxelarGateway public immutable gateway;\\n\\n    constructor(address gateway_) {\\n        if (gateway_ == address(0)) revert InvalidAddress();\\n\\n        gateway = IAxelarGateway(gateway_);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\\n            revert NotApprovedByGateway();\\n\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external {\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (\\n            !gateway.validateContractCallAndMint(\\n                commandId,\\n                sourceChain,\\n                sourceAddress,\\n                payloadHash,\\n                tokenSymbol,\\n                amount\\n            )\\n        ) revert NotApprovedByGateway();\\n\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n    }\\n\\n    function _execute(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x2a88d046f9cdc664afc7b788d6c5b534d361b46fb45ab7abf721a58dd813359b\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\n\\ninterface IAxelarExecutable {\\n    error InvalidAddress();\\n    error NotApprovedByGateway();\\n\\n    function gateway() external view returns (IAxelarGateway);\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4279ef3b4fe5e7082f39c665d4aeddc6d84fcc6fadaacd1d8ae604ba6146b8e6\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { GasInfo } from '../types/GasEstimationTypes.sol';\\nimport { IInterchainGasEstimation } from './IInterchainGasEstimation.sol';\\nimport { IUpgradable } from './IUpgradable.sol';\\n\\n/**\\n * @title IAxelarGasService Interface\\n * @notice This is an interface for the AxelarGasService contract which manages gas payments\\n * and refunds for cross-chain communication on the Axelar network.\\n * @dev This interface inherits IUpgradable\\n */\\ninterface IAxelarGasService is IInterchainGasEstimation, IUpgradable {\\n    error InvalidAddress();\\n    error NotCollector();\\n    error InvalidAmounts();\\n    error InvalidGasUpdates();\\n    error InvalidParams();\\n    error InsufficientGasPayment(uint256 required, uint256 provided);\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForExpressCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    event ExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeExpressGasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event Refunded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Pay for gas for any type of contract execution on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @dev If estimateOnChain is true, the function will estimate the gas cost and revert if the payment is insufficient.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param executionGasLimit The gas limit for the contract call\\n     * @param estimateOnChain Flag to enable on-chain gas estimation\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     * @param params Additional parameters for gas payment. This can be left empty for normal contract call payments.\\n     */\\n    function payGas(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        uint256 executionGasLimit,\\n        bool estimateOnChain,\\n        address refundAddress,\\n        bytes calldata params\\n    ) external payable;\\n\\n    /**\\n     * @notice Pay for gas using ERC20 tokens for a contract call on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param gasToken The address of the ERC20 token used to pay for gas\\n     * @param gasFeeAmount The amount of tokens to pay for gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pay for gas using ERC20 tokens for a contract call with tokens on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call with tokens will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call with tokens\\n     * @param symbol The symbol of the token to be sent with the call\\n     * @param amount The amount of tokens to be sent with the call\\n     * @param gasToken The address of the ERC20 token used to pay for gas\\n     * @param gasFeeAmount The amount of tokens to pay for gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pay for gas using native currency for a contract call on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Pay for gas using native currency for a contract call with tokens on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call with tokens will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call with tokens\\n     * @param symbol The symbol of the token to be sent with the call\\n     * @param amount The amount of tokens to be sent with the call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Pay for gas using ERC20 tokens for an express contract call on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to express execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param gasToken The address of the ERC20 token used to pay for gas\\n     * @param gasFeeAmount The amount of tokens to pay for gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payGasForExpressCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pay for gas using ERC20 tokens for an express contract call with tokens on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to express execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call with tokens will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call with tokens\\n     * @param symbol The symbol of the token to be sent with the call\\n     * @param amount The amount of tokens to be sent with the call\\n     * @param gasToken The address of the ERC20 token used to pay for gas\\n     * @param gasFeeAmount The amount of tokens to pay for gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pay for gas using native currency for an express contract call on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payNativeGasForExpressCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Pay for gas using native currency for an express contract call with tokens on a destination chain.\\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\\n     * @param sender The address making the payment\\n     * @param destinationChain The target chain where the contract call with tokens will be made\\n     * @param destinationAddress The target address on the destination chain\\n     * @param payload Data payload for the contract call with tokens\\n     * @param symbol The symbol of the token to be sent with the call\\n     * @param amount The amount of tokens to be sent with the call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function payNativeGasForExpressCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Add additional gas payment using ERC20 tokens after initiating a cross-chain call.\\n     * @dev This function can be called on the source chain after calling the gateway to execute a remote contract.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param gasToken The ERC20 token address used to add gas\\n     * @param gasFeeAmount The amount of tokens to add as gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Add additional gas payment using native currency after initiating a cross-chain call.\\n     * @dev This function can be called on the source chain after calling the gateway to execute a remote contract.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Add additional gas payment using ERC20 tokens after initiating an express cross-chain call.\\n     * @dev This function can be called on the source chain after calling the gateway to express execute a remote contract.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param gasToken The ERC20 token address used to add gas\\n     * @param gasFeeAmount The amount of tokens to add as gas\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function addExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    /**\\n     * @notice Add additional gas payment using native currency after initiating an express cross-chain call.\\n     * @dev This function can be called on the source chain after calling the gateway to express execute a remote contract.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param refundAddress The address where refunds, if any, should be sent\\n     */\\n    function addNativeExpressGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    /**\\n     * @notice Updates the gas price for a specific chain.\\n     * @dev This function is called by the gas oracle to update the gas prices for a specific chains.\\n     * @param chains Array of chain names\\n     * @param gasUpdates Array of gas updates\\n     */\\n    function updateGasInfo(string[] calldata chains, GasInfo[] calldata gasUpdates) external;\\n\\n    /**\\n     * @notice Allows the gasCollector to collect accumulated fees from the contract.\\n     * @dev Use address(0) as the token address for native currency.\\n     * @param receiver The address to receive the collected fees\\n     * @param tokens Array of token addresses to be collected\\n     * @param amounts Array of amounts to be collected for each respective token address\\n     */\\n    function collectFees(\\n        address payable receiver,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /**\\n     * @notice Refunds gas payment to the receiver in relation to a specific cross-chain transaction.\\n     * @dev Only callable by the gasCollector.\\n     * @dev Use address(0) as the token address to refund native currency.\\n     * @param txHash The transaction hash of the cross-chain call\\n     * @param logIndex The log index for the cross-chain call\\n     * @param receiver The address to receive the refund\\n     * @param token The token address to be refunded\\n     * @param amount The amount to refund\\n     */\\n    function refund(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Returns the address of the designated gas collector.\\n     * @return address of the gas collector\\n     */\\n    function gasCollector() external returns (address);\\n}\\n\",\"keccak256\":\"0x7ad77d3af41f342e9032889a7b5aa224ab0c6dfaf9ce9350fe403d4a596c5eae\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IGovernable } from './IGovernable.sol';\\nimport { IImplementation } from './IImplementation.sol';\\n\\ninterface IAxelarGateway is IImplementation, IGovernable {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationAddress,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallExecuted(bytes32 indexed commandId);\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    /************************\\\\\\n    |* Governance Functions *|\\n    \\\\************************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"keccak256\":\"0x98a66ec4f5c9e1e444ed39be682195834417cf2cd160db0c56f60e225c826be4\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IContractIdentifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// General interface for upgradable contracts\\ninterface IContractIdentifier {\\n    /**\\n     * @notice Returns the contract ID. It can be used as a check during upgrades.\\n     * @dev Meant to be overridden in derived contracts.\\n     * @return bytes32 The contract ID\\n     */\\n    function contractId() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x21a94655f7f1ed3d7188bd38ce6187892c615b80f9a74e123cbc38113d855a35\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IGovernable Interface\\n * @notice This is an interface used by the AxelarGateway contract to manage governance and mint limiter roles.\\n */\\ninterface IGovernable {\\n    error NotGovernance();\\n    error NotMintLimiter();\\n    error InvalidGovernance();\\n    error InvalidMintLimiter();\\n\\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\\n    event MintLimiterTransferred(address indexed previousGovernance, address indexed newGovernance);\\n\\n    /**\\n     * @notice Returns the governance address.\\n     * @return address of the governance\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * @notice Returns the mint limiter address.\\n     * @return address of the mint limiter\\n     */\\n    function mintLimiter() external view returns (address);\\n\\n    /**\\n     * @notice Transfer the governance role to another address.\\n     * @param newGovernance The new governance address\\n     */\\n    function transferGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Transfer the mint limiter role to another address.\\n     * @param newGovernance The new mint limiter address\\n     */\\n    function transferMintLimiter(address newGovernance) external;\\n}\\n\",\"keccak256\":\"0x686c534975bfc4e00f89be5e4a779a41a63f7c5fc204429c839bcdbf09584fd0\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IContractIdentifier } from './IContractIdentifier.sol';\\n\\ninterface IImplementation is IContractIdentifier {\\n    error NotProxy();\\n\\n    function setup(bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xa7f275514d44bec3ab8ab8c768736329174d7cc6c5cd329c3509a66bce9cd468\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IInterchainGasEstimation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { GasEstimationType, GasInfo } from '../types/GasEstimationTypes.sol';\\n\\n/**\\n * @title IInterchainGasEstimation Interface\\n * @notice This is an interface for the InterchainGasEstimation contract\\n * which allows for estimating gas fees for cross-chain communication on the Axelar network.\\n */\\ninterface IInterchainGasEstimation {\\n    error UnsupportedEstimationType(GasEstimationType gasEstimationType);\\n\\n    /**\\n     * @notice Event emitted when the gas price for a specific chain is updated.\\n     * @param chain The name of the chain\\n     * @param info The gas info for the chain\\n     */\\n    event GasInfoUpdated(string chain, GasInfo info);\\n\\n    /**\\n     * @notice Returns the gas price for a specific chain.\\n     * @param chain The name of the chain\\n     * @return gasInfo The gas info for the chain\\n     */\\n    function getGasInfo(string calldata chain) external view returns (GasInfo memory);\\n\\n    /**\\n     * @notice Estimates the gas fee for a cross-chain contract call.\\n     * @param destinationChain Axelar registered name of the destination chain\\n     * @param destinationAddress Destination contract address being called\\n     * @param executionGasLimit The gas limit to be used for the destination contract execution,\\n     *        e.g. pass in 200k if your app consumes needs upto 200k for this contract call\\n     * @param params Additional parameters for the gas estimation\\n     * @return gasEstimate The cross-chain gas estimate, in terms of source chain's native gas token that should be forwarded to the gas service.\\n     */\\n    function estimateGasFee(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        uint256 executionGasLimit,\\n        bytes calldata params\\n    ) external view returns (uint256 gasEstimate);\\n}\\n\",\"keccak256\":\"0x5463c0d3632e53d3906796d4283a627bd7ebc63d0092685715d98340db9516ff\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IOwnable Interface\\n * @notice IOwnable is an interface that abstracts the implementation of a\\n * contract with ownership control features. It's commonly used in upgradable\\n * contracts and includes the functionality to get current owner, transfer\\n * ownership, and propose and accept ownership.\\n */\\ninterface IOwnable {\\n    error NotOwner();\\n    error InvalidOwner();\\n    error InvalidOwnerAddress();\\n\\n    event OwnershipTransferStarted(address indexed newOwner);\\n    event OwnershipTransferred(address indexed newOwner);\\n\\n    /**\\n     * @notice Returns the current owner of the contract.\\n     * @return address The address of the current owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the pending owner of the contract.\\n     * @return address The address of the pending owner\\n     */\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new address\\n     * @param newOwner The address to transfer ownership to\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Proposes to transfer the contract's ownership to a new address.\\n     * The new owner needs to accept the ownership explicitly.\\n     * @param newOwner The address to transfer ownership to\\n     */\\n    function proposeOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Transfers ownership to the pending owner.\\n     * @dev Can only be called by the pending owner\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x5cb5691c9293e3011e1b133485411e8933ca1e110f2436a663df12991d134bf7\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IOwnable } from './IOwnable.sol';\\nimport { IImplementation } from './IImplementation.sol';\\n\\n// General interface for upgradable contracts\\ninterface IUpgradable is IOwnable, IImplementation {\\n    error InvalidCodeHash();\\n    error InvalidImplementation();\\n    error SetupFailed();\\n\\n    event Upgraded(address indexed newImplementation);\\n\\n    function implementation() external view returns (address);\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4e1f84c9711c3c15c77aee5fce8de99fcb49a902c7e6ff24626c924a60b8c22d\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/types/GasEstimationTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title GasEstimationType\\n * @notice This enum represents the gas estimation types for different chains.\\n */\\nenum GasEstimationType {\\n    Default,\\n    OptimismEcotone,\\n    OptimismBedrock,\\n    Arbitrum,\\n    Scroll\\n}\\n\\n/**\\n * @title GasInfo\\n * @notice This struct represents the gas pricing information for a specific chain.\\n * @dev Smaller uint types are used for efficient struct packing to save storage costs.\\n */\\nstruct GasInfo {\\n    /// @dev Custom gas pricing rule, such as L1 data fee on L2s\\n    uint64 gasEstimationType;\\n    /// @dev Scalar value needed for specific gas estimation types, expected to be less than 1e10\\n    uint64 l1FeeScalar;\\n    /// @dev Axelar base fee for cross-chain message approval on destination, in terms of source native gas token\\n    uint128 axelarBaseFee;\\n    /// @dev Gas price of destination chain, in terms of the source chain token, i.e dest_gas_price * dest_token_market_price / src_token_market_price\\n    uint128 relativeGasPrice;\\n    /// @dev Needed for specific gas estimation types. Blob base fee of destination chain, in terms of the source chain token, i.e dest_blob_base_fee * dest_token_market_price / src_token_market_price\\n    uint128 relativeBlobBaseFee;\\n    /// @dev Axelar express fee for express execution, in terms of source chain token\\n    uint128 expressFee;\\n}\\n\",\"keccak256\":\"0x7da6d20700698dfae8f8252c442e4bebd29030ffcdac4fbbe986f1ddbcb6365c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/OnRampSource.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IAxelarGateway } from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\\\";\\nimport { IAxelarGasService } from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\\\";\\nimport { AxelarExecutable } from \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol\\\";\\n\\ncontract OnRampSource is AxelarExecutable {\\n    struct Offer {\\n        bytes commP;\\n        uint64 size;\\n        string location;\\n        uint256 amount;\\n        IERC20 token;\\n    }\\n\\n    event DataReady(Offer offer, uint64 id);\\n    uint64 private nextOfferId = 1;\\n    mapping(uint64 => Offer) public offers;\\n\\n    IAxelarGasService public gasService;\\n\\n    // Mappings for aggregation data\\n    mapping(uint64 => uint64[]) public aggregations;\\n    mapping(uint64 => address) public aggregationPayout;\\n    mapping(uint64 => bool) public provenAggregations;\\n    mapping(bytes => uint64) public commPToAggregateID;\\n\\n    constructor(address gateway_, address gasService_) AxelarExecutable(gateway_) {\\n        gasService = IAxelarGasService(gasService_);\\n    }\\n\\n    function offerData(\\n        Offer calldata offer,\\n        string calldata destinationChain,\\n        string calldata destinationAddress\\n    ) external payable returns (uint64) {\\n\\n        uint64 id = nextOfferId++;\\n        offers[id] = offer;\\n\\n        // Prepare payload\\n        bytes memory payload = abi.encode(\\\"DataReady\\\", offer, id);\\n\\n        // Pay for gas\\n        if (msg.value > 0) {\\n            gasService.payNativeGasForContractCall{ value: msg.value }(\\n                address(this),\\n                destinationChain,\\n                destinationAddress,\\n                payload,\\n                msg.sender\\n            );\\n        }\\n\\n        // Send message to destination chain\\n        gateway.callContract(destinationChain, destinationAddress, payload);\\n\\n        emit DataReady(offer, id);\\n        return id;\\n    }\\n\\n    // Handle incoming messages from the destination chain\\n    function _execute(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) internal override {\\n        (string memory messageType, bytes memory data) = abi.decode(payload, (string, bytes));\\n\\n        if (keccak256(bytes(messageType)) == keccak256(bytes(\\\"ProveDataStored\\\"))) {\\n            bytes memory commP = data;\\n\\n            uint64 aggID = commPToAggregateID[commP];\\n            require(aggID != 0, \\\"Aggregate not found\\\");\\n\\n            // Transfer payments to the payout address\\n            for (uint256 i = 0; i < aggregations[aggID].length; i++) {\\n                uint64 offerID = aggregations[aggID][i];\\n                Offer storage offer = offers[offerID];\\n                require(\\n                    offer.token.transfer(aggregationPayout[aggID], offer.amount),\\n                    \\\"Payment transfer failed\\\"\\n                );\\n            }\\n            provenAggregations[aggID] = true;\\n        } else {\\n            revert(\\\"Unknown message type\\\");\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0x59be5adca557e6e8b5a697d796e0c06145fb7a6a0c654d0959c3b2489458fcd9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052600080546001600160401b03191660011790553480156200002457600080fd5b5060405162001746380380620017468339810160408190526200004791620000ba565b816001600160a01b038116620000705760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b03908116608052600280546001600160a01b0319169290911691909117905550620000f2565b80516001600160a01b0381168114620000b557600080fd5b919050565b60008060408385031215620000ce57600080fd5b620000d9836200009d565b9150620000e9602084016200009d565b90509250929050565b608051611624620001226000396000818160a8015281816102ad015281816104e701526106c801526116246000f3fe6080604052600436106100915760003560e01c8063665496381161005957806366549638146101905780636a22d8cc146101d0578063999a81cf146101f0578063cf71737814610249578063e6706e1d1461025c57600080fd5b8063116191b6146100965780631a98b2e0146100e75780632353b420146101095780632ebb620c1461013f5780634916065814610170575b600080fd5b3480156100a257600080fd5b506100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f357600080fd5b50610107610102366004610ad4565b61027c565b005b34801561011557600080fd5b506100ca610124366004610bc5565b6004602052600090815260409020546001600160a01b031681565b34801561014b57600080fd5b5061015f61015a366004610bc5565b61035f565b6040516100de959493929190610c39565b34801561017c57600080fd5b5061010761018b366004610c90565b6104b6565b34801561019c57600080fd5b506101c06101ab366004610bc5565b60056020526000908152604090205460ff1681565b60405190151581526020016100de565b3480156101dc57600080fd5b506002546100ca906001600160a01b031681565b3480156101fc57600080fd5b5061023161020b366004610dde565b80516020818301810180516006825292820191909301209152546001600160401b031681565b6040516001600160401b0390911681526020016100de565b610231610257366004610e1a565b61059e565b34801561026857600080fd5b50610231610277366004610eb6565b61077b565b6000858560405161028e929190610ee2565b604051908190038120631876eed960e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631876eed9906102f2908e908e908e908e908e9089908d908d908d90600401610f1b565b6020604051808303816000875af1158015610311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103359190610f7a565b61035257604051631403112d60e21b815260040160405180910390fd5b5050505050505050505050565b60016020526000908152604090208054819061037a90610f9c565b80601f01602080910402602001604051908101604052809291908181526020018280546103a690610f9c565b80156103f35780601f106103c8576101008083540402835291602001916103f3565b820191906000526020600020905b8154815290600101906020018083116103d657829003601f168201915b505050600184015460028501805494956001600160401b0390921694919350915061041d90610f9c565b80601f016020809104026020016040519081016040528092919081815260200182805461044990610f9c565b80156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505060038301546004909301549192916001600160a01b0316905085565b600082826040516104c8929190610ee2565b604051908190038120635f6970c360e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635f6970c390610526908b908b908b908b908b908990600401610fd6565b6020604051808303816000875af1158015610545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105699190610f7a565b61058657604051631403112d60e21b815260040160405180910390fd5b6105948787878787876107c7565b5050505050505050565b6000805481906001600160401b031681806105b88361102d565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555090508660016000836001600160401b03166001600160401b03168152602001908152602001600020818161061091906111dd565b9050506000878260405160200161062892919061140a565b60408051601f19818403018152919052905034156106b157600254604051630c93e3bb60e01b81526001600160a01b0390911690630c93e3bb90349061067e9030908c908c908c908c908a903390600401611455565b6000604051808303818588803b15801561069757600080fd5b505af11580156106ab573d6000803e3d6000fd5b50505050505b604051631c92115f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631c92115f90610705908a908a908a908a9088906004016114b7565b600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b505050507f995fecdf50d6a895827999e0cd16688138dfa8b7aff1bd2f69653b9e3e5d740c88836040516107689291906114fe565b60405180910390a1509695505050505050565b6003602052816000526040600020818154811061079757600080fd5b9060005260206000209060049182820401919006600802915091509054906101000a90046001600160401b031681565b6000806107d683850185611529565b60408051808201909152600f81526e141c9bdd9951185d1854dd1bdc9959608a1b60209182015282519083012091935091507f04987eac5fa3565f280bb9411eb6dfef5300c1d74f41f8abed632cb595edb54f01610a4d576000819050600060068260405161084591906115a3565b908152604051908190036020019020546001600160401b0316905060008190036108ac5760405162461bcd60e51b81526020600482015260136024820152721059d9dc9959d85d19481b9bdd08199bdd5b99606a1b60448201526064015b60405180910390fd5b60005b6001600160401b038216600090815260036020526040902054811015610a24576001600160401b03821660009081526003602052604081208054839081106108f9576108f96115bf565b6000918252602080832060048084049091015460039384166008026101000a90046001600160401b0390811680865260018452604080872080850154938b16885294849052958690205494840154955163a9059cbb60e01b81526001600160a01b039586169381019390935260248301959095529394509092919091169063a9059cbb906044016020604051808303816000875af115801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190610f7a565b610a0f5760405162461bcd60e51b815260206004820152601760248201527f5061796d656e74207472616e73666572206661696c656400000000000000000060448201526064016108a3565b50508080610a1c906115d5565b9150506108af565b506001600160401b03166000908152600560205260409020805460ff1916600117905550610594565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206d657373616765207479706560601b60448201526064016108a3565b60008083601f840112610a9e57600080fd5b5081356001600160401b03811115610ab557600080fd5b602083019150836020828501011115610acd57600080fd5b9250929050565b60008060008060008060008060008060c08b8d031215610af357600080fd5b8a35995060208b01356001600160401b0380821115610b1157600080fd5b610b1d8e838f01610a8c565b909b50995060408d0135915080821115610b3657600080fd5b610b428e838f01610a8c565b909950975060608d0135915080821115610b5b57600080fd5b610b678e838f01610a8c565b909750955060808d0135915080821115610b8057600080fd5b50610b8d8d828e01610a8c565b9150809450508092505060a08b013590509295989b9194979a5092959850565b6001600160401b0381168114610bc257600080fd5b50565b600060208284031215610bd757600080fd5b8135610be281610bad565b9392505050565b60005b83811015610c04578181015183820152602001610bec565b50506000910152565b60008151808452610c25816020860160208601610be9565b601f01601f19169290920160200192915050565b60a081526000610c4c60a0830188610c0d565b6001600160401b03871660208401528281036040840152610c6d8187610c0d565b606084019590955250506001600160a01b03919091166080909101529392505050565b60008060008060008060006080888a031215610cab57600080fd5b8735965060208801356001600160401b0380821115610cc957600080fd5b610cd58b838c01610a8c565b909850965060408a0135915080821115610cee57600080fd5b610cfa8b838c01610a8c565b909650945060608a0135915080821115610d1357600080fd5b50610d208a828b01610a8c565b989b979a50959850939692959293505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115610d6357610d63610d33565b604051601f8501601f19908116603f01168101908282118183101715610d8b57610d8b610d33565b81604052809350858152868686011115610da457600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112610dcf57600080fd5b610be283833560208501610d49565b600060208284031215610df057600080fd5b81356001600160401b03811115610e0657600080fd5b610e1284828501610dbe565b949350505050565b600080600080600060608688031215610e3257600080fd5b85356001600160401b0380821115610e4957600080fd5b9087019060a0828a031215610e5d57600080fd5b90955060208701359080821115610e7357600080fd5b610e7f89838a01610a8c565b90965094506040880135915080821115610e9857600080fd5b50610ea588828901610a8c565b969995985093965092949392505050565b60008060408385031215610ec957600080fd5b8235610ed481610bad565b946020939093013593505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260c060208201526000610f3560c083018a8c610ef2565b8281036040840152610f4881898b610ef2565b90508660608401528281036080840152610f63818688610ef2565b9150508260a08301529a9950505050505050505050565b600060208284031215610f8c57600080fd5b81518015158114610be257600080fd5b600181811c90821680610fb057607f821691505b602082108103610fd057634e487b7160e01b600052602260045260246000fd5b50919050565b868152608060208201526000610ff0608083018789610ef2565b8281036040840152611003818688610ef2565b915050826060830152979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681810361104957611049611017565b6001019392505050565b6000808335601e1984360301811261106a57600080fd5b8301803591506001600160401b0382111561108457600080fd5b602001915036819003821315610acd57600080fd5b601f8211156110e357600081815260208120601f850160051c810160208610156110c05750805b601f850160051c820191505b818110156110df578281556001016110cc565b5050505b505050565b600081356110f581610bad565b92915050565b6001600160401b0383111561111257611112610d33565b611126836111208354610f9c565b83611099565b6000601f84116001811461115a57600085156111425750838201355b600019600387901b1c1916600186901b1783556111b4565b600083815260209020601f19861690835b8281101561118b578685013582556020948501946001909201910161116b565b50868210156111a85760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6001600160a01b0381168114610bc257600080fd5b600081356110f5816111bb565b6111e78283611053565b6001600160401b038111156111fe576111fe610d33565b6112128161120c8554610f9c565b85611099565b6000601f821160018114611246576000831561122e5750838201355b600019600385901b1c1916600184901b1785556112a0565b600085815260209020601f19841690835b828110156112775786850135825560209485019460019092019101611257565b50848210156112945760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506112d46112b3602084016110e8565b600183016001600160401b0382166001600160401b03198254161781555050565b6112e16040830183611053565b6112ef8183600286016110fb565b50506060820135600382015561132e61130a608084016111d0565b6004830180546001600160a01b0319166001600160a01b0392909216919091179055565b5050565b6000808335601e1984360301811261134957600080fd5b83016020810192503590506001600160401b0381111561136857600080fd5b803603821315610acd57600080fd5b60006113838283611332565b60a0855261139560a086018284610ef2565b91505060208301356113a681610bad565b6001600160401b031660208501526113c16040840184611332565b85830360408701526113d4838284610ef2565b925050506060830135606085015260808301356113f0816111bb565b6001600160a01b0316608094909401939093525090919050565b60608152600960608201526844617461526561647960b81b608082015260a06020820152600061143d60a0830185611377565b90506001600160401b03831660408301529392505050565b600060018060a01b03808a16835260a0602084015261147860a08401898b610ef2565b838103604085015261148b81888a610ef2565b9050838103606085015261149f8187610c0d565b92505080841660808401525098975050505050505050565b6060815260006114cb606083018789610ef2565b82810360208401526114de818688610ef2565b905082810360408401526114f28185610c0d565b98975050505050505050565b6040815260006115116040830185611377565b90506001600160401b03831660208301529392505050565b6000806040838503121561153c57600080fd5b82356001600160401b038082111561155357600080fd5b818501915085601f83011261156757600080fd5b61157686833560208501610d49565b9350602085013591508082111561158c57600080fd5b5061159985828601610dbe565b9150509250929050565b600082516115b5818460208701610be9565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016115e7576115e7611017565b506001019056fea26469706673582212207d15cd8e5c0ebaad77f32dc4aca2779cf16dca5a50d13b964bad652bfdbc7a4a64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5178,
        "contract": "contracts/OnRampSource.sol:OnRampSource",
        "label": "nextOfferId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 5183,
        "contract": "contracts/OnRampSource.sol:OnRampSource",
        "label": "offers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_struct(Offer)5168_storage)"
      },
      {
        "astId": 5186,
        "contract": "contracts/OnRampSource.sol:OnRampSource",
        "label": "gasService",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAxelarGasService)655"
      },
      {
        "astId": 5191,
        "contract": "contracts/OnRampSource.sol:OnRampSource",
        "label": "aggregations",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_array(t_uint64)dyn_storage)"
      },
      {
        "astId": 5195,
        "contract": "contracts/OnRampSource.sol:OnRampSource",
        "label": "aggregationPayout",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint64,t_address)"
      },
      {
        "astId": 5199,
        "contract": "contracts/OnRampSource.sol:OnRampSource",
        "label": "provenAggregations",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 5203,
        "contract": "contracts/OnRampSource.sol:OnRampSource",
        "label": "commPToAggregateID",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IAxelarGasService)655": {
        "encoding": "inplace",
        "label": "contract IAxelarGasService",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2598": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_array(t_uint64)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint64[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint64)dyn_storage"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_struct(Offer)5168_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct OnRampSource.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)5168_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Offer)5168_storage": {
        "encoding": "inplace",
        "label": "struct OnRampSource.Offer",
        "members": [
          {
            "astId": 5158,
            "contract": "contracts/OnRampSource.sol:OnRampSource",
            "label": "commP",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5160,
            "contract": "contracts/OnRampSource.sol:OnRampSource",
            "label": "size",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 5162,
            "contract": "contracts/OnRampSource.sol:OnRampSource",
            "label": "location",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5164,
            "contract": "contracts/OnRampSource.sol:OnRampSource",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5167,
            "contract": "contracts/OnRampSource.sol:OnRampSource",
            "label": "token",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IERC20)2598"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}